// Copyright (c) 2019 RRZE, University Erlangen-Nuremberg
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// WARNING: This file has automatically been generated on Sun, 29 May 2022 03:45:36 CEST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package rocm_smi

/*
#cgo LDFLAGS: -Wl,--unresolved-symbols=ignore-in-object-files
#cgo CFLAGS:
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
#include "rocm_smi/rocm_smi.h"
#include "rocm_smi/kfd_ioctl.h"
#include "rocm_smi/rocm_smi_helpers.h"
#include "cgo_helpers.h"
*/
import "C"
import (
	"fmt"
	"sync"
	"unsafe"
)

// Ref returns a reference to C object as it is.
func (x *RSMI_counter_value) Ref() *C.rsmi_counter_value_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_counter_value_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_counter_value) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_counter_valueRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_counter_valueRef(ref unsafe.Pointer) *RSMI_counter_value {
	return (*RSMI_counter_value)(ref)
}

// NewRSMI_counter_value allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_counter_value() *RSMI_counter_value {
	return (*RSMI_counter_value)(allocRSMI_counter_valueMemory(1))
}

// allocRSMI_counter_valueMemory allocates memory for type C.rsmi_counter_value_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_counter_valueMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_counter_valueValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_counter_valueValue = unsafe.Sizeof([1]C.rsmi_counter_value_t{})

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_counter_value) PassRef() *C.rsmi_counter_value_t {
	if x == nil {
		x = (*RSMI_counter_value)(allocRSMI_counter_valueMemory(1))
	}
	return (*C.rsmi_counter_value_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_evt_notification_data) Ref() *C.rsmi_evt_notification_data_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_evt_notification_data_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_evt_notification_data) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_evt_notification_dataRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_evt_notification_dataRef(ref unsafe.Pointer) *RSMI_evt_notification_data {
	return (*RSMI_evt_notification_data)(ref)
}

// NewRSMI_evt_notification_data allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_evt_notification_data() *RSMI_evt_notification_data {
	return (*RSMI_evt_notification_data)(allocRSMI_evt_notification_dataMemory(1))
}

// allocRSMI_evt_notification_dataMemory allocates memory for type C.rsmi_evt_notification_data_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_evt_notification_dataMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_evt_notification_dataValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_evt_notification_dataValue = unsafe.Sizeof([1]C.rsmi_evt_notification_data_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_evt_notification_data) PassRef() *C.rsmi_evt_notification_data_t {
	if x == nil {
		x = (*RSMI_evt_notification_data)(allocRSMI_evt_notification_dataMemory(1))
	}
	return (*C.rsmi_evt_notification_data_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_utilization_counter) Ref() *C.rsmi_utilization_counter_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_utilization_counter_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_utilization_counter) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_utilization_counterRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_utilization_counterRef(ref unsafe.Pointer) *RSMI_utilization_counter {
	return (*RSMI_utilization_counter)(ref)
}

// NewRSMI_utilization_counter allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_utilization_counter() *RSMI_utilization_counter {
	return (*RSMI_utilization_counter)(allocRSMI_utilization_counterMemory(1))
}

// allocRSMI_utilization_counterMemory allocates memory for type C.rsmi_utilization_counter_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_utilization_counterMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_utilization_counterValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_utilization_counterValue = unsafe.Sizeof([1]C.rsmi_utilization_counter_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_utilization_counter) PassRef() *C.rsmi_utilization_counter_t {
	if x == nil {
		x = (*RSMI_utilization_counter)(allocRSMI_utilization_counterMemory(1))
	}
	return (*C.rsmi_utilization_counter_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_retired_page_record) Ref() *C.rsmi_retired_page_record_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_retired_page_record_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_retired_page_record) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_retired_page_recordRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_retired_page_recordRef(ref unsafe.Pointer) *RSMI_retired_page_record {
	return (*RSMI_retired_page_record)(ref)
}

// NewRSMI_retired_page_record allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_retired_page_record() *RSMI_retired_page_record {
	return (*RSMI_retired_page_record)(allocRSMI_retired_page_recordMemory(1))
}

// allocRSMI_retired_page_recordMemory allocates memory for type C.rsmi_retired_page_record_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_retired_page_recordMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_retired_page_recordValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_retired_page_recordValue = unsafe.Sizeof([1]C.rsmi_retired_page_record_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_retired_page_record) PassRef() *C.rsmi_retired_page_record_t {
	if x == nil {
		x = (*RSMI_retired_page_record)(allocRSMI_retired_page_recordMemory(1))
	}
	return (*C.rsmi_retired_page_record_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_power_profile_status) Ref() *C.rsmi_power_profile_status_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_power_profile_status_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_power_profile_status) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_power_profile_statusRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_power_profile_statusRef(ref unsafe.Pointer) *RSMI_power_profile_status {
	return (*RSMI_power_profile_status)(ref)
}

// NewRSMI_power_profile_status allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_power_profile_status() *RSMI_power_profile_status {
	return (*RSMI_power_profile_status)(allocRSMI_power_profile_statusMemory(1))
}

// allocRSMI_power_profile_statusMemory allocates memory for type C.rsmi_power_profile_status_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_power_profile_statusMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_power_profile_statusValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_power_profile_statusValue = unsafe.Sizeof([1]C.rsmi_power_profile_status_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_power_profile_status) PassRef() *C.rsmi_power_profile_status_t {
	if x == nil {
		x = (*RSMI_power_profile_status)(allocRSMI_power_profile_statusMemory(1))
	}
	return (*C.rsmi_power_profile_status_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_frequencies) Ref() *C.rsmi_frequencies_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_frequencies_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_frequencies) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_frequenciesRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_frequenciesRef(ref unsafe.Pointer) *RSMI_frequencies {
	return (*RSMI_frequencies)(ref)
}

// NewRSMI_frequencies allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_frequencies() *RSMI_frequencies {
	return (*RSMI_frequencies)(allocRSMI_frequenciesMemory(1))
}

// allocRSMI_frequenciesMemory allocates memory for type C.rsmi_frequencies_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_frequenciesMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_frequenciesValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_frequenciesValue = unsafe.Sizeof([1]C.rsmi_frequencies_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_frequencies) PassRef() *C.rsmi_frequencies_t {
	if x == nil {
		x = (*RSMI_frequencies)(allocRSMI_frequenciesMemory(1))
	}
	return (*C.rsmi_frequencies_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_pcie_bandwidth) Ref() *C.rsmi_pcie_bandwidth_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_pcie_bandwidth_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_pcie_bandwidth) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_pcie_bandwidthRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_pcie_bandwidthRef(ref unsafe.Pointer) *RSMI_pcie_bandwidth {
	return (*RSMI_pcie_bandwidth)(ref)
}

// NewRSMI_pcie_bandwidth allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_pcie_bandwidth() *RSMI_pcie_bandwidth {
	return (*RSMI_pcie_bandwidth)(allocRSMI_pcie_bandwidthMemory(1))
}

// allocRSMI_pcie_bandwidthMemory allocates memory for type C.rsmi_pcie_bandwidth_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_pcie_bandwidthMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_pcie_bandwidthValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_pcie_bandwidthValue = unsafe.Sizeof([1]C.rsmi_pcie_bandwidth_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_pcie_bandwidth) PassRef() *C.rsmi_pcie_bandwidth_t {
	if x == nil {
		x = (*RSMI_pcie_bandwidth)(allocRSMI_pcie_bandwidthMemory(1))
	}
	return (*C.rsmi_pcie_bandwidth_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_version) Ref() *C.rsmi_version_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_version_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_version) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_versionRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_versionRef(ref unsafe.Pointer) *RSMI_version {
	return (*RSMI_version)(ref)
}

// NewRSMI_version allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_version() *RSMI_version {
	return (*RSMI_version)(allocRSMI_versionMemory(1))
}

// allocRSMI_versionMemory allocates memory for type C.rsmi_version_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_versionMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_versionValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_versionValue = unsafe.Sizeof([1]C.rsmi_version_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_version) PassRef() *C.rsmi_version_t {
	if x == nil {
		x = (*RSMI_version)(allocRSMI_versionMemory(1))
	}
	return (*C.rsmi_version_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_range) Ref() *C.rsmi_range_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_range_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_range) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_rangeRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_rangeRef(ref unsafe.Pointer) *RSMI_range {
	return (*RSMI_range)(ref)
}

// NewRSMI_range allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_range() *RSMI_range {
	return (*RSMI_range)(allocRSMI_rangeMemory(1))
}

// allocRSMI_rangeMemory allocates memory for type C.rsmi_range_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_rangeMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_rangeValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_rangeValue = unsafe.Sizeof([1]C.rsmi_range_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_range) PassRef() *C.rsmi_range_t {
	if x == nil {
		x = (*RSMI_range)(allocRSMI_rangeMemory(1))
	}
	return (*C.rsmi_range_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_od_vddc_point) Ref() *C.rsmi_od_vddc_point_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_od_vddc_point_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_od_vddc_point) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_od_vddc_pointRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_od_vddc_pointRef(ref unsafe.Pointer) *RSMI_od_vddc_point {
	return (*RSMI_od_vddc_point)(ref)
}

// NewRSMI_od_vddc_point allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_od_vddc_point() *RSMI_od_vddc_point {
	return (*RSMI_od_vddc_point)(allocRSMI_od_vddc_pointMemory(1))
}

// allocRSMI_od_vddc_pointMemory allocates memory for type C.rsmi_od_vddc_point_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_od_vddc_pointMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_od_vddc_pointValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_od_vddc_pointValue = unsafe.Sizeof([1]C.rsmi_od_vddc_point_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_od_vddc_point) PassRef() *C.rsmi_od_vddc_point_t {
	if x == nil {
		x = (*RSMI_od_vddc_point)(allocRSMI_od_vddc_pointMemory(1))
	}
	return (*C.rsmi_od_vddc_point_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_freq_volt_region) Ref() *C.rsmi_freq_volt_region_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_freq_volt_region_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_freq_volt_region) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_freq_volt_regionRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_freq_volt_regionRef(ref unsafe.Pointer) *RSMI_freq_volt_region {
	return (*RSMI_freq_volt_region)(ref)
}

// NewRSMI_freq_volt_region allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_freq_volt_region() *RSMI_freq_volt_region {
	return (*RSMI_freq_volt_region)(allocRSMI_freq_volt_regionMemory(1))
}

// allocRSMI_freq_volt_regionMemory allocates memory for type C.rsmi_freq_volt_region_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_freq_volt_regionMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_freq_volt_regionValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_freq_volt_regionValue = unsafe.Sizeof([1]C.rsmi_freq_volt_region_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_freq_volt_region) PassRef() *C.rsmi_freq_volt_region_t {
	if x == nil {
		x = (*RSMI_freq_volt_region)(allocRSMI_freq_volt_regionMemory(1))
	}
	return (*C.rsmi_freq_volt_region_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_od_volt_curve) Ref() *C.rsmi_od_volt_curve_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_od_volt_curve_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_od_volt_curve) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_od_volt_curveRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_od_volt_curveRef(ref unsafe.Pointer) *RSMI_od_volt_curve {
	return (*RSMI_od_volt_curve)(ref)
}

// NewRSMI_od_volt_curve allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_od_volt_curve() *RSMI_od_volt_curve {
	return (*RSMI_od_volt_curve)(allocRSMI_od_volt_curveMemory(1))
}

// allocRSMI_od_volt_curveMemory allocates memory for type C.rsmi_od_volt_curve_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_od_volt_curveMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_od_volt_curveValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_od_volt_curveValue = unsafe.Sizeof([1]C.rsmi_od_volt_curve_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_od_volt_curve) PassRef() *C.rsmi_od_volt_curve_t {
	if x == nil {
		x = (*RSMI_od_volt_curve)(allocRSMI_od_volt_curveMemory(1))
	}
	return (*C.rsmi_od_volt_curve_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_od_volt_freq_data) Ref() *C.rsmi_od_volt_freq_data_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_od_volt_freq_data_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_od_volt_freq_data) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_od_volt_freq_dataRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_od_volt_freq_dataRef(ref unsafe.Pointer) *RSMI_od_volt_freq_data {
	return (*RSMI_od_volt_freq_data)(ref)
}

// NewRSMI_od_volt_freq_data allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_od_volt_freq_data() *RSMI_od_volt_freq_data {
	return (*RSMI_od_volt_freq_data)(allocRSMI_od_volt_freq_dataMemory(1))
}

// allocRSMI_od_volt_freq_dataMemory allocates memory for type C.rsmi_od_volt_freq_data_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_od_volt_freq_dataMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_od_volt_freq_dataValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_od_volt_freq_dataValue = unsafe.Sizeof([1]C.rsmi_od_volt_freq_data_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_od_volt_freq_data) PassRef() *C.rsmi_od_volt_freq_data_t {
	if x == nil {
		x = (*RSMI_od_volt_freq_data)(allocRSMI_od_volt_freq_dataMemory(1))
	}
	return (*C.rsmi_od_volt_freq_data_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_gpu_metrics) Ref() *C.rsmi_gpu_metrics_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_gpu_metrics_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_gpu_metrics) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_gpu_metricsRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_gpu_metricsRef(ref unsafe.Pointer) *RSMI_gpu_metrics {
	return (*RSMI_gpu_metrics)(ref)
}

// NewRSMI_gpu_metrics allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_gpu_metrics() *RSMI_gpu_metrics {
	return (*RSMI_gpu_metrics)(allocRSMI_gpu_metricsMemory(1))
}

// allocRSMI_gpu_metricsMemory allocates memory for type C.rsmi_gpu_metrics_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_gpu_metricsMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_gpu_metricsValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_gpu_metricsValue = unsafe.Sizeof([1]C.rsmi_gpu_metrics_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_gpu_metrics) PassRef() *C.rsmi_gpu_metrics_t {
	if x == nil {
		x = (*RSMI_gpu_metrics)(allocRSMI_gpu_metricsMemory(1))
	}
	return (*C.rsmi_gpu_metrics_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_error_count) Ref() *C.rsmi_error_count_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_error_count_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_error_count) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_error_countRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_error_countRef(ref unsafe.Pointer) *RSMI_error_count {
	return (*RSMI_error_count)(ref)
}

// NewRSMI_error_count allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_error_count() *RSMI_error_count {
	return (*RSMI_error_count)(allocRSMI_error_countMemory(1))
}

// allocRSMI_error_countMemory allocates memory for type C.rsmi_error_count_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_error_countMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_error_countValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_error_countValue = unsafe.Sizeof([1]C.rsmi_error_count_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_error_count) PassRef() *C.rsmi_error_count_t {
	if x == nil {
		x = (*RSMI_error_count)(allocRSMI_error_countMemory(1))
	}
	return (*C.rsmi_error_count_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_process_info) Ref() *C.rsmi_process_info_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_process_info_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_process_info) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_process_infoRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_process_infoRef(ref unsafe.Pointer) *RSMI_process_info {
	return (*RSMI_process_info)(ref)
}

// NewRSMI_process_info allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_process_info() *RSMI_process_info {
	return (*RSMI_process_info)(allocRSMI_process_infoMemory(1))
}

// allocRSMI_process_infoMemory allocates memory for type C.rsmi_process_info_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_process_infoMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_process_infoValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_process_infoValue = unsafe.Sizeof([1]C.rsmi_process_info_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_process_info) PassRef() *C.rsmi_process_info_t {
	if x == nil {
		x = (*RSMI_process_info)(allocRSMI_process_infoMemory(1))
	}
	return (*C.rsmi_process_info_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_helper_variants) Ref() *C.rsmi_helper_variants_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_helper_variants_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_helper_variants) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_helper_variantsRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_helper_variantsRef(ref unsafe.Pointer) *RSMI_helper_variants {
	return (*RSMI_helper_variants)(ref)
}

// NewRSMI_helper_variants allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_helper_variants() *RSMI_helper_variants {
	return (*RSMI_helper_variants)(allocRSMI_helper_variantsMemory(1))
}

// allocRSMI_helper_variantsMemory allocates memory for type C.rsmi_helper_variants_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_helper_variantsMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_helper_variantsValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_helper_variantsValue = unsafe.Sizeof([1]C.rsmi_helper_variants_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_helper_variants) PassRef() *C.rsmi_helper_variants_t {
	if x == nil {
		x = (*RSMI_helper_variants)(allocRSMI_helper_variantsMemory(1))
	}
	return (*C.rsmi_helper_variants_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_helper_function_variants) Ref() *C.rsmi_helper_function_variants_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_helper_function_variants_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_helper_function_variants) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_helper_function_variantsRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_helper_function_variantsRef(ref unsafe.Pointer) *RSMI_helper_function_variants {
	return (*RSMI_helper_function_variants)(ref)
}

// NewRSMI_helper_function_variants allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_helper_function_variants() *RSMI_helper_function_variants {
	return (*RSMI_helper_function_variants)(allocRSMI_helper_function_variantsMemory(1))
}

// allocRSMI_helper_function_variantsMemory allocates memory for type C.rsmi_helper_function_variants_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_helper_function_variantsMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_helper_function_variantsValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_helper_function_variantsValue = unsafe.Sizeof([1]C.rsmi_helper_function_variants_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_helper_function_variants) PassRef() *C.rsmi_helper_function_variants_t {
	if x == nil {
		x = (*RSMI_helper_function_variants)(allocRSMI_helper_function_variantsMemory(1))
	}
	return (*C.rsmi_helper_function_variants_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *RSMI_helper_function) Ref() *C.rsmi_helper_function_t {
	if x == nil {
		return nil
	}
	return (*C.rsmi_helper_function_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *RSMI_helper_function) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewRSMI_helper_functionRef converts the C object reference into a raw struct reference without wrapping.
func NewRSMI_helper_functionRef(ref unsafe.Pointer) *RSMI_helper_function {
	return (*RSMI_helper_function)(ref)
}

// NewRSMI_helper_function allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewRSMI_helper_function() *RSMI_helper_function {
	return (*RSMI_helper_function)(allocRSMI_helper_functionMemory(1))
}

// allocRSMI_helper_functionMemory allocates memory for type C.rsmi_helper_function_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocRSMI_helper_functionMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfRSMI_helper_functionValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfRSMI_helper_functionValue = unsafe.Sizeof([1]C.rsmi_helper_function_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *RSMI_helper_function) PassRef() *C.rsmi_helper_function_t {
	if x == nil {
		x = (*RSMI_helper_function)(allocRSMI_helper_functionMemory(1))
	}
	return (*C.rsmi_helper_function_t)(unsafe.Pointer(x))
}
